//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Windows.UI.Xaml.Markup;
using Windows.UI.Xaml;
using ScrumApp.ScrumApp_XamlTypeInfo;

namespace ScrumApp
{
    public partial class App : IXamlMetadataProvider
    {
        private XamlTypeInfoProvider _provider;

        public IXamlType GetXamlType(Type type)
        {
            if(_provider == null)
            {
                _provider = new XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public IXamlType GetXamlType(String typeName)
        {
            if(_provider == null)
            {
                _provider = new XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(typeName);
        }

        public XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new XmlnsDefinition[0];
        }
    }
}

namespace ScrumApp.ScrumApp_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public IXamlType GetXamlTypeByType(Type type)
        {
            string standardName;
            IXamlType xamlType = null;
            if(_xamlTypeToStandardName.TryGetValue(type, out standardName))
            {
                xamlType = GetXamlTypeByName(standardName);
            }
            else
            {
                xamlType = GetXamlTypeByName(type.FullName);
            }
            if(xamlType == null)
            {
                xamlType = CheckOtherMetadataProvidersForType(type);
            }
            return xamlType;
        }

        public IXamlType GetXamlTypeByName(string typeName)
        {
            if (String.IsNullOrEmpty(typeName))
            {
                return null;
            }
            IXamlType xamlType;
            if (_xamlTypes.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            xamlType = CreateXamlType(typeName);
            if (xamlType == null)
            {
                xamlType = CheckOtherMetadataProvidersForName(typeName);
            }
            if (xamlType != null)
            {
                _xamlTypes.Add(typeName, xamlType);
            }
            return xamlType;
        }

        public IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (String.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        Dictionary<string, IXamlType> _xamlTypes = new Dictionary<string, IXamlType>();
        Dictionary<string, IXamlMember> _xamlMembers = new Dictionary<string, IXamlMember>();
        Dictionary<Type, string> _xamlTypeToStandardName = new Dictionary<Type, string>();

        private void AddToMapOfTypeToStandardName(Type t, String str)
        {
            if(!_xamlTypeToStandardName.ContainsKey(t))
            {
                _xamlTypeToStandardName.Add(t, str);
            }
        }

        private object Activate_0_RadDatePicker() { return new Telerik.UI.Xaml.Controls.Input.RadDatePicker(); }

        private object Activate_7_AboutUserControl() { return new ScrumApp.Controls.AboutUserControl(); }

        private object Activate_8_PreferencesUserControl() { return new ScrumApp.Controls.PreferencesUserControl(); }

        private object Activate_9_PrivacyPolicyUserControl() { return new ScrumApp.Controls.PrivacyPolicyUserControl(); }

        private object Activate_10_LayoutAwarePage() { return new ScrumApp.Common.LayoutAwarePage(); }

        private object Activate_14_AddProjectView() { return new ScrumApp.View.AddProjectView(); }

        private object Activate_15_AddUserStoryView() { return new ScrumApp.View.AddUserStoryView(); }

        private object Activate_16_AddUserView() { return new ScrumApp.View.AddUserView(); }

        private object Activate_17_AllProjectsView() { return new ScrumApp.View.AllProjectsView(); }

        private object Activate_18_DetailStoryView() { return new ScrumApp.View.DetailStoryView(); }

        private object Activate_19_DetailUserView() { return new ScrumApp.View.DetailUserView(); }

        private object Activate_20_LoginView() { return new ScrumApp.View.LoginView(); }

        private object Activate_21_MainPage() { return new ScrumApp.MainPage(); }

        private object Activate_22_ProjectView() { return new ScrumApp.View.ProjectView(); }

        private object Activate_23_SprintView() { return new ScrumApp.View.SprintView(); }


        private IXamlType CreateXamlType(string typeName)
        {
            XamlSystemBaseType xamlType = null;
            XamlUserType userType;

            switch (typeName)
            {
            case "Windows.UI.Xaml.Controls.Control":
                xamlType = new XamlSystemBaseType(typeName, typeof(Windows.UI.Xaml.Controls.Control));
                break;

            case "Boolean":
                xamlType = new XamlSystemBaseType(typeName, typeof(System.Boolean));
                break;

            case "Object":
                xamlType = new XamlSystemBaseType(typeName, typeof(System.Object));
                break;

            case "Windows.UI.Xaml.DataTemplate":
                xamlType = new XamlSystemBaseType(typeName, typeof(Windows.UI.Xaml.DataTemplate));
                break;

            case "String":
                xamlType = new XamlSystemBaseType(typeName, typeof(System.String));
                break;

            case "Windows.UI.Xaml.Style":
                xamlType = new XamlSystemBaseType(typeName, typeof(Windows.UI.Xaml.Style));
                break;

            case "Double":
                xamlType = new XamlSystemBaseType(typeName, typeof(System.Double));
                break;

            case "Int32":
                xamlType = new XamlSystemBaseType(typeName, typeof(System.Int32));
                break;

            case "Windows.UI.Xaml.Controls.UserControl":
                xamlType = new XamlSystemBaseType(typeName, typeof(Windows.UI.Xaml.Controls.UserControl));
                break;

            case "Windows.UI.Xaml.Controls.Page":
                xamlType = new XamlSystemBaseType(typeName, typeof(Windows.UI.Xaml.Controls.Page));
                break;

            case "Telerik.UI.Xaml.Controls.Input.RadDatePicker":
                userType = new XamlUserType(this, typeName, typeof(Telerik.UI.Xaml.Controls.Input.RadDatePicker), GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker"));
                userType.Activator = Activate_0_RadDatePicker;
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker":
                userType = new XamlUserType(this, typeName, typeof(Telerik.UI.Xaml.Controls.Input.DateTimePicker), GetXamlTypeByName("Telerik.UI.Xaml.Controls.RadHeaderedControl"));
                userType.AddMemberName("AutoSizeWidth");
                AddToMapOfTypeToStandardName(typeof(System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("IsReadOnly");
                AddToMapOfTypeToStandardName(typeof(System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("EmptyContent");
                AddToMapOfTypeToStandardName(typeof(System.Object),
                                                   "Object");
                userType.AddMemberName("EmptyContentTemplate");
                userType.AddMemberName("DisplayValueFormat");
                AddToMapOfTypeToStandardName(typeof(System.String),
                                                   "String");
                userType.AddMemberName("ValueString");
                AddToMapOfTypeToStandardName(typeof(System.String),
                                                   "String");
                userType.AddMemberName("MaxValue");
                userType.AddMemberName("MinValue");
                userType.AddMemberName("Value");
                AddToMapOfTypeToStandardName(typeof(System.Nullable<System.DateTime>),
                                                   "System.Nullable<System.DateTime>");
                userType.AddMemberName("SelectorBackgroundStyle");
                userType.AddMemberName("ItemLength");
                AddToMapOfTypeToStandardName(typeof(System.Double),
                                                   "Double");
                userType.AddMemberName("ItemSpacing");
                AddToMapOfTypeToStandardName(typeof(System.Double),
                                                   "Double");
                userType.AddMemberName("SelectorFormat");
                AddToMapOfTypeToStandardName(typeof(System.String),
                                                   "String");
                userType.AddMemberName("IsOpen");
                AddToMapOfTypeToStandardName(typeof(System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("SelectorDefaultValue");
                AddToMapOfTypeToStandardName(typeof(System.Nullable<System.DateTime>),
                                                   "System.Nullable<System.DateTime>");
                userType.AddMemberName("SelectorHeader");
                AddToMapOfTypeToStandardName(typeof(System.Object),
                                                   "Object");
                userType.AddMemberName("SelectorHeaderTemplate");
                userType.AddMemberName("ItemCount");
                AddToMapOfTypeToStandardName(typeof(System.Int32),
                                                   "Int32");
                userType.AddMemberName("ValueChanged");
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.RadHeaderedControl":
                userType = new XamlUserType(this, typeName, typeof(Telerik.UI.Xaml.Controls.RadHeaderedControl), GetXamlTypeByName("Telerik.UI.Xaml.Controls.RadControl"));
                userType.AddMemberName("Header");
                AddToMapOfTypeToStandardName(typeof(System.Object),
                                                   "Object");
                userType.AddMemberName("HeaderTemplate");
                userType.AddMemberName("HeaderStyle");
                xamlType = userType;
                break;

            case "Telerik.UI.Xaml.Controls.RadControl":
                userType = new XamlUserType(this, typeName, typeof(Telerik.UI.Xaml.Controls.RadControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.AddMemberName("CurrentVisualState");
                AddToMapOfTypeToStandardName(typeof(System.String),
                                                   "String");
                xamlType = userType;
                break;

            case "System.DateTime":
                userType = new XamlUserType(this, typeName, typeof(System.DateTime), GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case "System.ValueType":
                userType = new XamlUserType(this, typeName, typeof(System.ValueType), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "System.Nullable<System.DateTime>":
                userType = new XamlUserType(this, typeName, typeof(System.Nullable<System.DateTime>), GetXamlTypeByName("System.ValueType"));
                AddToMapOfTypeToStandardName(typeof(System.Nullable<System.DateTime>),
                                                   "System.Nullable<System.DateTime>");
                xamlType = userType;
                break;

            case "ScrumApp.Controls.AboutUserControl":
                userType = new XamlUserType(this, typeName, typeof(ScrumApp.Controls.AboutUserControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_7_AboutUserControl;
                xamlType = userType;
                break;

            case "ScrumApp.Controls.PreferencesUserControl":
                userType = new XamlUserType(this, typeName, typeof(ScrumApp.Controls.PreferencesUserControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_8_PreferencesUserControl;
                xamlType = userType;
                break;

            case "ScrumApp.Controls.PrivacyPolicyUserControl":
                userType = new XamlUserType(this, typeName, typeof(ScrumApp.Controls.PrivacyPolicyUserControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_9_PrivacyPolicyUserControl;
                xamlType = userType;
                break;

            case "ScrumApp.Common.LayoutAwarePage":
                userType = new XamlUserType(this, typeName, typeof(ScrumApp.Common.LayoutAwarePage), GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_10_LayoutAwarePage;
                xamlType = userType;
                break;

            case "System.EventHandler":
                userType = new XamlUserType(this, typeName, typeof(System.EventHandler), GetXamlTypeByName("System.MulticastDelegate"));
                xamlType = userType;
                break;

            case "System.MulticastDelegate":
                userType = new XamlUserType(this, typeName, typeof(System.MulticastDelegate), GetXamlTypeByName("System.Delegate"));
                xamlType = userType;
                break;

            case "System.Delegate":
                userType = new XamlUserType(this, typeName, typeof(System.Delegate), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "ScrumApp.View.AddProjectView":
                userType = new XamlUserType(this, typeName, typeof(ScrumApp.View.AddProjectView), GetXamlTypeByName("ScrumApp.Common.LayoutAwarePage"));
                userType.Activator = Activate_14_AddProjectView;
                xamlType = userType;
                break;

            case "ScrumApp.View.AddUserStoryView":
                userType = new XamlUserType(this, typeName, typeof(ScrumApp.View.AddUserStoryView), GetXamlTypeByName("ScrumApp.Common.LayoutAwarePage"));
                userType.Activator = Activate_15_AddUserStoryView;
                xamlType = userType;
                break;

            case "ScrumApp.View.AddUserView":
                userType = new XamlUserType(this, typeName, typeof(ScrumApp.View.AddUserView), GetXamlTypeByName("ScrumApp.Common.LayoutAwarePage"));
                userType.Activator = Activate_16_AddUserView;
                xamlType = userType;
                break;

            case "ScrumApp.View.AllProjectsView":
                userType = new XamlUserType(this, typeName, typeof(ScrumApp.View.AllProjectsView), GetXamlTypeByName("ScrumApp.Common.LayoutAwarePage"));
                userType.Activator = Activate_17_AllProjectsView;
                xamlType = userType;
                break;

            case "ScrumApp.View.DetailStoryView":
                userType = new XamlUserType(this, typeName, typeof(ScrumApp.View.DetailStoryView), GetXamlTypeByName("ScrumApp.Common.LayoutAwarePage"));
                userType.Activator = Activate_18_DetailStoryView;
                xamlType = userType;
                break;

            case "ScrumApp.View.DetailUserView":
                userType = new XamlUserType(this, typeName, typeof(ScrumApp.View.DetailUserView), GetXamlTypeByName("ScrumApp.Common.LayoutAwarePage"));
                userType.Activator = Activate_19_DetailUserView;
                xamlType = userType;
                break;

            case "ScrumApp.View.LoginView":
                userType = new XamlUserType(this, typeName, typeof(ScrumApp.View.LoginView), GetXamlTypeByName("ScrumApp.Common.LayoutAwarePage"));
                userType.Activator = Activate_20_LoginView;
                xamlType = userType;
                break;

            case "ScrumApp.MainPage":
                userType = new XamlUserType(this, typeName, typeof(ScrumApp.MainPage), GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_21_MainPage;
                xamlType = userType;
                break;

            case "ScrumApp.View.ProjectView":
                userType = new XamlUserType(this, typeName, typeof(ScrumApp.View.ProjectView), GetXamlTypeByName("ScrumApp.Common.LayoutAwarePage"));
                userType.Activator = Activate_22_ProjectView;
                xamlType = userType;
                break;

            case "ScrumApp.View.SprintView":
                userType = new XamlUserType(this, typeName, typeof(ScrumApp.View.SprintView), GetXamlTypeByName("ScrumApp.Common.LayoutAwarePage"));
                userType.Activator = Activate_23_SprintView;
                xamlType = userType;
                break;

            }
            return xamlType;
        }

        private List<IXamlMetadataProvider> _otherProviders;
        private List<IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    _otherProviders = new List<IXamlMetadataProvider>();
                    IXamlMetadataProvider provider;
                    provider = new Telerik.UI.Xaml.Controls.Chart.Chart_XamlTypeInfo.XamlMetaDataProvider() as IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new Telerik.UI.Xaml.Controls.DataVisualization.DataVisualization_XamlTypeInfo.XamlMetaDataProvider() as IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new Telerik.UI.Xaml.Controls.Input.Input_XamlTypeInfo.XamlMetaDataProvider() as IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                    provider = new Telerik.UI.Xaml.Controls.Primitives.Primitives_XamlTypeInfo.XamlMetaDataProvider() as IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                }
                return _otherProviders;
            }
        }

        private IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            IXamlType xamlType = null;
            foreach(IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    return xamlType;
                }
            }
            return null;
        }

        private IXamlType CheckOtherMetadataProvidersForType(Type type)
        {
            IXamlType xamlType = null;
            foreach(IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    return xamlType;
                }
            }
            return null;
        }

        private object get_0_DateTimePicker_AutoSizeWidth(object instance)
        {
            var that = (Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.AutoSizeWidth;
        }
        private void set_0_DateTimePicker_AutoSizeWidth(object instance, object Value)
        {
            var that = (Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            that.AutoSizeWidth = (System.Boolean)Value;
        }
        private object get_1_DateTimePicker_IsReadOnly(object instance)
        {
            var that = (Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.IsReadOnly;
        }
        private void set_1_DateTimePicker_IsReadOnly(object instance, object Value)
        {
            var that = (Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            that.IsReadOnly = (System.Boolean)Value;
        }
        private object get_2_DateTimePicker_EmptyContent(object instance)
        {
            var that = (Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.EmptyContent;
        }
        private void set_2_DateTimePicker_EmptyContent(object instance, object Value)
        {
            var that = (Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            that.EmptyContent = (System.Object)Value;
        }
        private object get_3_DateTimePicker_EmptyContentTemplate(object instance)
        {
            var that = (Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.EmptyContentTemplate;
        }
        private void set_3_DateTimePicker_EmptyContentTemplate(object instance, object Value)
        {
            var that = (Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            that.EmptyContentTemplate = (Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_4_DateTimePicker_DisplayValueFormat(object instance)
        {
            var that = (Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.DisplayValueFormat;
        }
        private void set_4_DateTimePicker_DisplayValueFormat(object instance, object Value)
        {
            var that = (Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            that.DisplayValueFormat = (System.String)Value;
        }
        private object get_5_DateTimePicker_ValueString(object instance)
        {
            var that = (Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.ValueString;
        }
        private object get_6_DateTimePicker_MaxValue(object instance)
        {
            var that = (Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.MaxValue;
        }
        private void set_6_DateTimePicker_MaxValue(object instance, object Value)
        {
            var that = (Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            that.MaxValue = (System.DateTime)Value;
        }
        private object get_7_DateTimePicker_MinValue(object instance)
        {
            var that = (Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.MinValue;
        }
        private void set_7_DateTimePicker_MinValue(object instance, object Value)
        {
            var that = (Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            that.MinValue = (System.DateTime)Value;
        }
        private object get_8_DateTimePicker_Value(object instance)
        {
            var that = (Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.Value;
        }
        private void set_8_DateTimePicker_Value(object instance, object Value)
        {
            var that = (Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            that.Value = (System.Nullable<System.DateTime>)Value;
        }
        private object get_9_DateTimePicker_SelectorBackgroundStyle(object instance)
        {
            var that = (Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.SelectorBackgroundStyle;
        }
        private void set_9_DateTimePicker_SelectorBackgroundStyle(object instance, object Value)
        {
            var that = (Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            that.SelectorBackgroundStyle = (Windows.UI.Xaml.Style)Value;
        }
        private object get_10_DateTimePicker_ItemLength(object instance)
        {
            var that = (Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.ItemLength;
        }
        private void set_10_DateTimePicker_ItemLength(object instance, object Value)
        {
            var that = (Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            that.ItemLength = (System.Double)Value;
        }
        private object get_11_DateTimePicker_ItemSpacing(object instance)
        {
            var that = (Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.ItemSpacing;
        }
        private void set_11_DateTimePicker_ItemSpacing(object instance, object Value)
        {
            var that = (Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            that.ItemSpacing = (System.Double)Value;
        }
        private object get_12_DateTimePicker_SelectorFormat(object instance)
        {
            var that = (Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.SelectorFormat;
        }
        private void set_12_DateTimePicker_SelectorFormat(object instance, object Value)
        {
            var that = (Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            that.SelectorFormat = (System.String)Value;
        }
        private object get_13_DateTimePicker_IsOpen(object instance)
        {
            var that = (Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.IsOpen;
        }
        private void set_13_DateTimePicker_IsOpen(object instance, object Value)
        {
            var that = (Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            that.IsOpen = (System.Boolean)Value;
        }
        private object get_14_DateTimePicker_SelectorDefaultValue(object instance)
        {
            var that = (Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.SelectorDefaultValue;
        }
        private void set_14_DateTimePicker_SelectorDefaultValue(object instance, object Value)
        {
            var that = (Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            that.SelectorDefaultValue = (System.Nullable<System.DateTime>)Value;
        }
        private object get_15_DateTimePicker_SelectorHeader(object instance)
        {
            var that = (Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.SelectorHeader;
        }
        private void set_15_DateTimePicker_SelectorHeader(object instance, object Value)
        {
            var that = (Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            that.SelectorHeader = (System.Object)Value;
        }
        private object get_16_DateTimePicker_SelectorHeaderTemplate(object instance)
        {
            var that = (Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.SelectorHeaderTemplate;
        }
        private void set_16_DateTimePicker_SelectorHeaderTemplate(object instance, object Value)
        {
            var that = (Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            that.SelectorHeaderTemplate = (Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_17_DateTimePicker_ItemCount(object instance)
        {
            var that = (Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            return that.ItemCount;
        }
        private void set_17_DateTimePicker_ItemCount(object instance, object Value)
        {
            var that = (Telerik.UI.Xaml.Controls.Input.DateTimePicker)instance;
            that.ItemCount = (System.Int32)Value;
        }
        private object get_18_RadHeaderedControl_Header(object instance)
        {
            var that = (Telerik.UI.Xaml.Controls.RadHeaderedControl)instance;
            return that.Header;
        }
        private void set_18_RadHeaderedControl_Header(object instance, object Value)
        {
            var that = (Telerik.UI.Xaml.Controls.RadHeaderedControl)instance;
            that.Header = (System.Object)Value;
        }
        private object get_19_RadHeaderedControl_HeaderTemplate(object instance)
        {
            var that = (Telerik.UI.Xaml.Controls.RadHeaderedControl)instance;
            return that.HeaderTemplate;
        }
        private void set_19_RadHeaderedControl_HeaderTemplate(object instance, object Value)
        {
            var that = (Telerik.UI.Xaml.Controls.RadHeaderedControl)instance;
            that.HeaderTemplate = (Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_20_RadHeaderedControl_HeaderStyle(object instance)
        {
            var that = (Telerik.UI.Xaml.Controls.RadHeaderedControl)instance;
            return that.HeaderStyle;
        }
        private void set_20_RadHeaderedControl_HeaderStyle(object instance, object Value)
        {
            var that = (Telerik.UI.Xaml.Controls.RadHeaderedControl)instance;
            that.HeaderStyle = (Windows.UI.Xaml.Style)Value;
        }
        private object get_21_RadControl_CurrentVisualState(object instance)
        {
            var that = (Telerik.UI.Xaml.Controls.RadControl)instance;
            return that.CurrentVisualState;
        }

        private IXamlMember CreateXamlMember(string longMemberName)
        {
            XamlMember xamlMember = null;
            XamlUserType userType;

            switch (longMemberName)
            {
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.AutoSizeWidth":
                userType = (XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new XamlMember(this, "AutoSizeWidth", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_DateTimePicker_AutoSizeWidth;
                xamlMember.Setter = set_0_DateTimePicker_AutoSizeWidth;
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.IsReadOnly":
                userType = (XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new XamlMember(this, "IsReadOnly", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_1_DateTimePicker_IsReadOnly;
                xamlMember.Setter = set_1_DateTimePicker_IsReadOnly;
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.EmptyContent":
                userType = (XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new XamlMember(this, "EmptyContent", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_2_DateTimePicker_EmptyContent;
                xamlMember.Setter = set_2_DateTimePicker_EmptyContent;
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.EmptyContentTemplate":
                userType = (XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new XamlMember(this, "EmptyContentTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_3_DateTimePicker_EmptyContentTemplate;
                xamlMember.Setter = set_3_DateTimePicker_EmptyContentTemplate;
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.DisplayValueFormat":
                userType = (XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new XamlMember(this, "DisplayValueFormat", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_4_DateTimePicker_DisplayValueFormat;
                xamlMember.Setter = set_4_DateTimePicker_DisplayValueFormat;
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.ValueString":
                userType = (XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new XamlMember(this, "ValueString", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_5_DateTimePicker_ValueString;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.MaxValue":
                userType = (XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new XamlMember(this, "MaxValue", "System.DateTime");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_6_DateTimePicker_MaxValue;
                xamlMember.Setter = set_6_DateTimePicker_MaxValue;
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.MinValue":
                userType = (XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new XamlMember(this, "MinValue", "System.DateTime");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_7_DateTimePicker_MinValue;
                xamlMember.Setter = set_7_DateTimePicker_MinValue;
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.Value":
                userType = (XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new XamlMember(this, "Value", "System.Nullable<System.DateTime>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_8_DateTimePicker_Value;
                xamlMember.Setter = set_8_DateTimePicker_Value;
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.SelectorBackgroundStyle":
                userType = (XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new XamlMember(this, "SelectorBackgroundStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_9_DateTimePicker_SelectorBackgroundStyle;
                xamlMember.Setter = set_9_DateTimePicker_SelectorBackgroundStyle;
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.ItemLength":
                userType = (XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new XamlMember(this, "ItemLength", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_10_DateTimePicker_ItemLength;
                xamlMember.Setter = set_10_DateTimePicker_ItemLength;
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.ItemSpacing":
                userType = (XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new XamlMember(this, "ItemSpacing", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_11_DateTimePicker_ItemSpacing;
                xamlMember.Setter = set_11_DateTimePicker_ItemSpacing;
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.SelectorFormat":
                userType = (XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new XamlMember(this, "SelectorFormat", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_12_DateTimePicker_SelectorFormat;
                xamlMember.Setter = set_12_DateTimePicker_SelectorFormat;
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.IsOpen":
                userType = (XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new XamlMember(this, "IsOpen", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_13_DateTimePicker_IsOpen;
                xamlMember.Setter = set_13_DateTimePicker_IsOpen;
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.SelectorDefaultValue":
                userType = (XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new XamlMember(this, "SelectorDefaultValue", "System.Nullable<System.DateTime>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_14_DateTimePicker_SelectorDefaultValue;
                xamlMember.Setter = set_14_DateTimePicker_SelectorDefaultValue;
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.SelectorHeader":
                userType = (XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new XamlMember(this, "SelectorHeader", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_15_DateTimePicker_SelectorHeader;
                xamlMember.Setter = set_15_DateTimePicker_SelectorHeader;
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.SelectorHeaderTemplate":
                userType = (XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new XamlMember(this, "SelectorHeaderTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_16_DateTimePicker_SelectorHeaderTemplate;
                xamlMember.Setter = set_16_DateTimePicker_SelectorHeaderTemplate;
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.ItemCount":
                userType = (XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new XamlMember(this, "ItemCount", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_DateTimePicker_ItemCount;
                xamlMember.Setter = set_17_DateTimePicker_ItemCount;
                break;
            case "Telerik.UI.Xaml.Controls.RadHeaderedControl.Header":
                userType = (XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.RadHeaderedControl");
                xamlMember = new XamlMember(this, "Header", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_18_RadHeaderedControl_Header;
                xamlMember.Setter = set_18_RadHeaderedControl_Header;
                break;
            case "Telerik.UI.Xaml.Controls.RadHeaderedControl.HeaderTemplate":
                userType = (XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.RadHeaderedControl");
                xamlMember = new XamlMember(this, "HeaderTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_19_RadHeaderedControl_HeaderTemplate;
                xamlMember.Setter = set_19_RadHeaderedControl_HeaderTemplate;
                break;
            case "Telerik.UI.Xaml.Controls.RadHeaderedControl.HeaderStyle":
                userType = (XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.RadHeaderedControl");
                xamlMember = new XamlMember(this, "HeaderStyle", "Windows.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_20_RadHeaderedControl_HeaderStyle;
                xamlMember.Setter = set_20_RadHeaderedControl_HeaderStyle;
                break;
            case "Telerik.UI.Xaml.Controls.RadControl.CurrentVisualState":
                userType = (XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.RadControl");
                xamlMember = new XamlMember(this, "CurrentVisualState", "String");
                xamlMember.Getter = get_21_RadControl_CurrentVisualState;
                xamlMember.SetIsReadOnly();
                break;
            case "Telerik.UI.Xaml.Controls.Input.DateTimePicker.ValueChanged":
                userType = (XamlUserType)GetXamlTypeByName("Telerik.UI.Xaml.Controls.Input.DateTimePicker");
                xamlMember = new XamlMember(this, "ValueChanged", "System.EventHandler");
                break;
            }
            return xamlMember;
        }

    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : IXamlType
    {
        string _fullName;
        Type _underlyingType;

        public XamlSystemBaseType(string fullName, Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public IXamlType BaseType { get { throw new NotImplementedException(); } }
        virtual public IXamlMember ContentProperty { get { throw new NotImplementedException(); } }
        virtual public IXamlMember GetMember(string name) { throw new NotImplementedException(); }
        virtual public bool IsArray { get { throw new NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new NotImplementedException(); } }
        virtual public IXamlType ItemType { get { throw new NotImplementedException(); } }
        virtual public IXamlType KeyType { get { throw new NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new NotImplementedException(); }
        virtual public void RunInitializer()   { throw new NotImplementedException(); }
        virtual public object CreateFromString(String input)   { throw new NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : XamlSystemBaseType
    {
        XamlTypeInfoProvider _provider;
        IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        Dictionary<string, string> _memberNames;
        Dictionary<string, object> _enumValues;

        public XamlUserType(XamlTypeInfoProvider provider, string fullName, Type fullType, IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }

        override public IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public Object CreateFromString(String input)
        {
            if (_enumValues != null)
            {
                Int32 value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    Int32 enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = Convert.ToInt32(valuePart.Trim());
                            }
                            catch( FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( String.Compare(valuePart.Trim(), key, System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( FormatException )
                    {
                        throw new ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : IXamlMember
    {
        XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(String targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new InvalidOperationException("SetValue");
        }
    }
}


